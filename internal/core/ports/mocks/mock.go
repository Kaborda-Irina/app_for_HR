// Code generated by MockGen. DO NOT EDIT.
// Source: services_ports.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/inkoba/app_for_HR/internal/core/domain"
	request "github.com/inkoba/app_for_HR/internal/core/domain/request"
	response "github.com/inkoba/app_for_HR/internal/core/domain/response"
	gomock "github.com/golang/mock/gomock"
)

// MockIHealthService is a mock of IHealthService interface.
type MockIHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthServiceMockRecorder
}

// MockIHealthServiceMockRecorder is the mock recorder for MockIHealthService.
type MockIHealthServiceMockRecorder struct {
	mock *MockIHealthService
}

// NewMockIHealthService creates a new mock instance.
func NewMockIHealthService(ctrl *gomock.Controller) *MockIHealthService {
	mock := &MockIHealthService{ctrl: ctrl}
	mock.recorder = &MockIHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthService) EXPECT() *MockIHealthServiceMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockIHealthService) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIHealthServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIHealthService)(nil).Ping))
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserService) Create(user *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserServiceMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserService)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockIUserService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockIUserService) Get(id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserService)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockIUserService) GetAll() ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUserServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUserService)(nil).GetAll))
}

// GetUserByUsername mocks base method.
func (m *MockIUserService) GetUserByUsername(username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserServiceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserService)(nil).GetUserByUsername), username)
}

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// IsValidUser mocks base method.
func (m *MockIAuthService) IsValidUser(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidUser", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidUser indicates an expected call of IsValidUser.
func (mr *MockIAuthServiceMockRecorder) IsValidUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidUser", reflect.TypeOf((*MockIAuthService)(nil).IsValidUser), username, password)
}

// MockISalaryService is a mock of ISalaryService interface.
type MockISalaryService struct {
	ctrl     *gomock.Controller
	recorder *MockISalaryServiceMockRecorder
}

// MockISalaryServiceMockRecorder is the mock recorder for MockISalaryService.
type MockISalaryServiceMockRecorder struct {
	mock *MockISalaryService
}

// NewMockISalaryService creates a new mock instance.
func NewMockISalaryService(ctrl *gomock.Controller) *MockISalaryService {
	mock := &MockISalaryService{ctrl: ctrl}
	mock.recorder = &MockISalaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISalaryService) EXPECT() *MockISalaryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISalaryService) Create(file []byte) (*response.SalaryUploadReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", file)
	ret0, _ := ret[0].(*response.SalaryUploadReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockISalaryServiceMockRecorder) Create(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISalaryService)(nil).Create), file)
}

// GetSalariesByFilter mocks base method.
func (m *MockISalaryService) GetSalariesByFilter(filterSalary *request.ConditionForFilteringSalaries) ([]*response.SalariesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSalariesByFilter", filterSalary)
	ret0, _ := ret[0].([]*response.SalariesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSalariesByFilter indicates an expected call of GetSalariesByFilter.
func (mr *MockISalaryServiceMockRecorder) GetSalariesByFilter(filterSalary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSalariesByFilter", reflect.TypeOf((*MockISalaryService)(nil).GetSalariesByFilter), filterSalary)
}

// MockICryptoService is a mock of ICryptoService interface.
type MockICryptoService struct {
	ctrl     *gomock.Controller
	recorder *MockICryptoServiceMockRecorder
}

// MockICryptoServiceMockRecorder is the mock recorder for MockICryptoService.
type MockICryptoServiceMockRecorder struct {
	mock *MockICryptoService
}

// NewMockICryptoService creates a new mock instance.
func NewMockICryptoService(ctrl *gomock.Controller) *MockICryptoService {
	mock := &MockICryptoService{ctrl: ctrl}
	mock.recorder = &MockICryptoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICryptoService) EXPECT() *MockICryptoServiceMockRecorder {
	return m.recorder
}

// CompareHashAndPassword mocks base method.
func (m *MockICryptoService) CompareHashAndPassword(hashedPassword, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockICryptoServiceMockRecorder) CompareHashAndPassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockICryptoService)(nil).CompareHashAndPassword), hashedPassword, password)
}

// GetHashedPassword mocks base method.
func (m *MockICryptoService) GetHashedPassword(arg0 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashedPassword indicates an expected call of GetHashedPassword.
func (mr *MockICryptoServiceMockRecorder) GetHashedPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPassword", reflect.TypeOf((*MockICryptoService)(nil).GetHashedPassword), arg0)
}
