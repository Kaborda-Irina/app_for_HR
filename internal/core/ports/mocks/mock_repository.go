// Code generated by MockGen. DO NOT EDIT.
// Source: repositories_ports.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/inkoba/app_for_HR/internal/core/domain"
	request "github.com/inkoba/app_for_HR/internal/core/domain/request"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserRepository) Create(user *domain.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockIUserRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockIUserRepository) Get(id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockIUserRepository) GetAll() ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUserRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUserRepository)(nil).GetAll))
}

// GetUserByUsername mocks base method.
func (m *MockIUserRepository) GetUserByUsername(username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserRepositoryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserRepository)(nil).GetUserByUsername), username)
}

// MockISalaryRepository is a mock of ISalaryRepository interface.
type MockISalaryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISalaryRepositoryMockRecorder
}

// MockISalaryRepositoryMockRecorder is the mock recorder for MockISalaryRepository.
type MockISalaryRepositoryMockRecorder struct {
	mock *MockISalaryRepository
}

// NewMockISalaryRepository creates a new mock instance.
func NewMockISalaryRepository(ctrl *gomock.Controller) *MockISalaryRepository {
	mock := &MockISalaryRepository{ctrl: ctrl}
	mock.recorder = &MockISalaryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISalaryRepository) EXPECT() *MockISalaryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISalaryRepository) Create(salaries []*domain.Salary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", salaries)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISalaryRepositoryMockRecorder) Create(salaries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISalaryRepository)(nil).Create), salaries)
}

// DeleteAll mocks base method.
func (m *MockISalaryRepository) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockISalaryRepositoryMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockISalaryRepository)(nil).DeleteAll))
}

// GetFilteredSalaries mocks base method.
func (m *MockISalaryRepository) GetFilteredSalaries(filterSalary *request.ConditionForFilteringSalaries) ([]*domain.Salary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredSalaries", filterSalary)
	ret0, _ := ret[0].([]*domain.Salary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredSalaries indicates an expected call of GetFilteredSalaries.
func (mr *MockISalaryRepositoryMockRecorder) GetFilteredSalaries(filterSalary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredSalaries", reflect.TypeOf((*MockISalaryRepository)(nil).GetFilteredSalaries), filterSalary)
}

// MockIHealthRepository is a mock of IHealthRepository interface.
type MockIHealthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIHealthRepositoryMockRecorder
}

// MockIHealthRepositoryMockRecorder is the mock recorder for MockIHealthRepository.
type MockIHealthRepositoryMockRecorder struct {
	mock *MockIHealthRepository
}

// NewMockIHealthRepository creates a new mock instance.
func NewMockIHealthRepository(ctrl *gomock.Controller) *MockIHealthRepository {
	mock := &MockIHealthRepository{ctrl: ctrl}
	mock.recorder = &MockIHealthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHealthRepository) EXPECT() *MockIHealthRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockIHealthRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIHealthRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIHealthRepository)(nil).Ping))
}
